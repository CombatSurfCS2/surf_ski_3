<!-- kv3 encoding:text:version{e21c7f3c-8a33-41c5-9977-a76d3a32aa0d} format:generic:version{7412167c-06e9-4698-aff2-e63eb59037e7} -->
{
// For soundevents to compile into the addon, this file must be kept named as soundevents_addon.vsndevts and all new soundevents should be added to this file. 

// Quick Start: Do a search for "TEMPLATE" and find a description of the kind of sound you want to play. Then copy/paste the entire soundevent, renaming it to your name of choice. In this new soundevent, simply change the .vsnds path or soundevent_01 references to the sound/soundevents you want to hear. Save this file. You should now hear your sound in the game provided it's linked to a soundscape entitiy in your map.  

// A soundevent in CS2 is a container that can host a combination of sound parameters, vsnds (.wavs), and other soundevents. Soundevents can be used to trigger other soundevents and therefore small hierarchies can be created if needed. For most ambient sounds in CS2, we use soundevents in small hierarchical structures (parent/child/grandchildren) for each area in a map.

// Helpful convars and tips:
// soundscape_debug 1 : shows env_soundscape entity placement and LOS during runtime.
// server_snd_cast Weapon_AK47.Single 1 : places a  repeating soundevent at the location of the crosshair during runtime repeating every 1 sec. This is useful for testing 3d sound, occlusion and sound location based reverb (as opposed to traditional listener based reverb). To stop, type server_snd_cast
// To hear ambient soundevent changes while a map is running, simply leave the soundscape area and re-enter.
// Use the Sounds debugger in the VConcsole to see a list of currently playing vsnds and a log of previously played soundevents with associated data. The button on the right above "Filter Audio"  will allow you to see the location of emitting sound.

// reverb presets:
//reverb_2_crawlSpace
//reverb_3_smallTunnels
//reverb_4_smallCarpetRoom
//reverb_5_smallRoom
//reverb_6_largeRoom
//reverb_7_mediumHall
//reverb_8_mediumCarpetRoom
//reverb_9_mediumChamber
//reverb_10_warehouse
//reverb_11_smallBright9
//reverb_12_mediumBright
//reverb_13_largeBright
//reverb_14_brightHallway
//reverb_15_largeCarpetRoom
//reverb_16_carpetCorridor
//reverb_17_smallConcrete
//reverb_18_mediumConcrete
//reverb_19_largeConcrete
//reverb_20_outsideAlley
//reverb_21_outsideStreet
//reverb_22_outsideOpen
//reverb_23_smallBathroom
//reverb_24_largeBathroom

// see below for example ambient sound organization and configuration:


// This is a parent soundevent whose only job is to set the reverb and trigger child soundevents to play. Child soundevents have their own soundevent properties and generally do not inherit config from their parent (unless expiciticy told to inherit position). Many of the fields are not relevant for this parent soundevent, but are for child soundevents further below, so we have listed and documented them here.
	
	"ambient_example.outdoors" = //soundevent name to be hooked into env_soundscape entity
	{
		type = "csgo_mega" //always use csgo_mega in cs2
		volume = 1.0 // volume of the sound event
		pitch = 1.0 // pitch of the sound event
		mixgroup = "Ambient" // the soundmixer category
		block_matching_events = false // block further instances of this soundevent from playing during playback.
		block_match_entity = false // block further instances of this soundevent only if it's triggered on the same entity.
		block_distance = 69.0 // block further instances of this soundevent within this radius in game units. Allow further instances to play if further away than this.
		enable_child_events = true //make this soundevent trigger other soundevents
		reverb_wet = 0 //the amount of listener reverb applied to this soundevent
		occlusion_intensity = 0 // how much this soundevent is muffled by obsuring geometry
		override_dsp_preset = true // make this soundevent apply a reverb zone
		dsp_preset = "reverb_21_outsideStreet" // if override_dsp_presest is true, set this reverb preset
		use_distance_volume_mapping_curve = true //use a distance vs volume falloff curve
		use_time_volume_mapping_curve = true // use a time vs volume falloff curve - used for fade-ins.
		set_child_position = false // pass through this soundevents position down to child soundevents
		delay = 0.0 // time in seconds to delay playback of this soundevent
		vsnd_files_track_01 = "sounds/common/null.vsnd" //the vsnd to play. Becasue this is a parent, it doesn't need to play a sound. 
		// the child soundevents to trigger.    
		soundevent_01 = 
		[
			"ambient_example.outdoors.wind",
			"ambient_example.outdoors.airplanes",
			"ambient_example.outdoors.birds",
		]
		// a description of the volume falloff curve between two points [point 1][point 2]. Not relevant in this case because no vsnd is playing. Child events can have thier own version of this curve.
		distance_volume_mapping_curve = 
		[
			[
				//point 1
				0.0, // listener at distance 0 units away 
				1.0, // full volume
				-0.004698, -0.000714, 2.0, 0.0, // shape
			],
			[
				// point 2
				1400.0, // listener at distance 1400 units away
				0.0, // silent volume
 				-0.000714, -0.000714, 0.0, 3.0, //shape
			],
		]
		// a description of the fade out that happens when the soundevent is told to stop. Not relvant for this event becasue no vsnd is playing. Child events can have thier own version of this curve.
		fadetime_volume_mapping_curve = 
		[
			[
				// point 1
				0.0, //time in seconds
				1.0, // volume
				0.0, 0.0, 2.0, 3.0, //shape
			],
			[
				// point 2
				2.0, // time in seconds
				0.0, // volume 
				0.0, 0.0, 2.0, 3.0, //shape
			],
		]
		
		// a description of the fade in that happens when the soundevent is told to play. Not relevant for this event because no vsnd is playing. Child events can have thier own version of this curve.
		time_volume_mapping_curve = 
		[
			[
				0.0, // time in seconds 
				0.0, // volume
				0.0, 6.823822, 2.0, 2.0, //shape
			],
			[
				0.362857, // time in seconds
				1.0, // volume
				0.260146, 0.260146, 2.0, 3.0, //shape
			],
		]
	}

	// TEMPLATE: This is a child soundevent that plays a simple looping 2d stereo sound on the player. The looping is defined via markers embedded in the .wav file. 
	"ambient_example.outdoors.wind" = 
	{
		type = "csgo_mega"
		volume = 0.5
		pitch = 0.8
		mixgroup = "Ambient"
		block_matching_events = false
		block_match_entity = false
		reverb_wet = 0
		use_time_volume_mapping_curve = true
		use_distance_unfiltered_stereo_mapping_curve = true // applies a distance vs stereo curve that allows a soundevent to be non positional/stereo.
		set_child_position = false
		vsnd_files_track_01 = "sounds/ambient/dust2/wind_sand_01.vsnd"
		distance_volume_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				300.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
		fadetime_volume_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				2.0, 0.0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
		time_volume_mapping_curve = 
		[
			[
				0.0, 0.0, 0.0, 6.823822,
				2.0, 2.0,
			],
			[
				0.362857, 1.0, 0.260146, 0.260146,
				2.0, 3.0,
			],
		]
		// a description of a stereo vs distance curve between two points. This curve can be used to blend between 2d and 3d sound over distance. In the case below we have specified the sound as being natural stereo forever. 
		distance_unfiltered_stereo_mapping_curve = 
		[
			[
				0.0, // 0 distance away from the listener
				1.0, // fully 2d stereo playback as presented in the wav file.
				0.0, 0.0, 2.0, 3.0, // shape of the curve. A flat line. 
			],
			[
				300.0, // 300 units away from the listener
				1.0, // fully 2d stereo. ie. There is no change in stereoness of this sound over distance.
				0.0, 0.0, 2.0, 3.0, // shape of the curve. A flat line. 
			],
		]
	}
	

// TEMPLATE: A child soundevent that chooses from a variety of sounds with a randomized position around the player at a randomized time interval.
	"ambient_example.outdoors.airplanes" = 
	{
		type = "csgo_mega"
		volume = 0.7
		mixgroup = "Ambient"
		block_matching_events = false
		block_match_entity = false
		reverb_wet = 1.0
		randomize_position_min_radius = 1000.0 // the min distance at which the sound will spawn away from it's center point
		randomize_position_max_radius = 4000.0 // the max distance at which the sound will spawn away from it's center point
		randomize_position_hemisphere = false // randomize if the sound plays above or below the player
		use_time_volume_mapping_curve = true
		volume_random_max = 0.3 // an additional amount to randomize the base volume by. end result vol = 0.3 to 0.6
		pitch_random_min = -0.06 // minused from the base pitch value then the result is used as the lower bound of pitch variation.
		pitch_random_max = 0.06 // added to the base pitch then the result is used as the  upper bound for pitch variation. 
		retrigger_interval_min = 13.0 // minimum time in seconds which to auto retrigger this sound again.
		retrigger_interval_max = 35.0 // maximum time in seconds which to auto retrigger this sound again. 
		enable_retrigger = true // enables auto re-triggering. Essentially behaves as a looping sound but with gaps of silence in between as defined by retrigger_interval_min and max. 
		block_duration = 0.0
		block_distance = 0.0
		position = [ 0.0, 0.0, 0.0 ] // the x,y,z world coordinates at which to position this sound. Use getpos in console to derive coordinates in game.  
		use_world_position = false // enable the use of the xyz world coordinates above. 
		set_child_position = false
		position_relative_to_player = true // make the randomized position use the player/listener as the center point.
		// randomly choose from this array of sounds
		vsnd_files_track_01 = 
		[
			"sounds/ambient/dust2/airplane_01.vsnd",
			"sounds/ambient/dust2/airplane_02.vsnd",
			"sounds/ambient/dust2/airplane_03.vsnd",
		]
		distance_volume_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				1400.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
		fadetime_volume_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				2.0, 0.0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
		time_volume_mapping_curve = 
		[
			[
				0.0, 0.0, 0.0, 6.823822,
				2.0, 2.0,
			],
			[
				0.362857, 1.0, 0.260146, 0.260146,
				2.0, 3.0,
			],
		]
	}
	
	// TEMPLATE: A soundevent that plays at a set position in the world and repeats at a randomized time interval.  
	"ambient_example.outdoors.birds" = 
	{
		type = "csgo_mega"
		volume = 0.5
		pitch = 1.0
		mixgroup = "Ambient"
		block_matching_events = false
		block_match_entity = false
		reverb_wet = 1.0
		use_time_volume_mapping_curve = true
		volume_random_max = 0.3
		volume_random_min = -0.3
		pitch_random_min = -0.06
		pitch_random_max = 0.06
		retrigger_interval_min = 1.0
		retrigger_interval_max = 10.0
		enable_retrigger = true
		block_duration = 0.0
		block_distance = 0.0
		position = [ 1263.968750, -495.908081, 64.031250] // use getpos in the console to get position values.
		use_world_position = true //use world coordinates above to define where this sound emits from
		set_child_position = false
		position_relative_to_player = false
		vsnd_files_track_01 = 
		[
			"sounds/bird_01.vsnd",
			"sounds/bird_02.vsnd",
			"sounds/bird_03.vsnd",
			"sounds/bird_04.vsnd",
			"sounds/bird_05.vsnd",
			"sounds/bird_06.vsnd",
		]
		distance_volume_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				2000, 0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
		fadetime_volume_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				2.0, 0.0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
		time_volume_mapping_curve = 
		[
			[
				0.0, 0.0, 0.0, 6.823822,
				2.0, 2.0,
			],
			[
				0.362857, 1.0, 0.260146, 0.260146,
				2.0, 3.0,
			],
		]
	}	

	// TEMPLATE: A parent soundevent that sets a reverb preset and triggers all the child soundevents (birds, cars, airplanes, rockfalls etc) associated with a particula area. Hooked into the soundevent field in the env_soundscape entity in the map. 
	"ambient_example.indoors" = 
	{
		type = "csgo_mega"
		volume = 1
		pitch = 1.0
		mixgroup = "Ambient"
		block_matching_events = false
		block_match_entity = false
		block_distance = 69.0
		enable_child_events = true
		reverb_wet = 0.3
		override_dsp_preset = true
		dsp_preset = "reverb_9_mediumChamber"
		use_distance_volume_mapping_curve = true
		use_time_volume_mapping_curve = true
		set_child_position = false
		vsnd_files_track_01 = "sounds/common/null.vsnd"
		soundevent_01 = 
		[
			"ambient_example.indoors.drone",
			"ambient_example.indoors.rockfall",
			"ambient_example.indoors.vent",
		]
		distance_volume_mapping_curve = 
		[
			[
				0.0, 1.0, -0.004698, -0.000714,
				2.0, 0.0,
			],
			[
				1400.0, 0.0, -0.000714, -0.000714,
				0.0, 3.0,
			],
		]
		fadetime_volume_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				2.0, 0.0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
		time_volume_mapping_curve = 
		[
			[
				0.0, 0.0, 0.0, 6.823822,
				2.0, 2.0,
			],
			[
				0.362857, 1.0, 0.260146, 0.260146,
				2.0, 3.0,
			],
		]
	}
	
	// A simple 2d looping sound. Looping region is defined by embedded markers in the .wav file. 
	"ambient_example.indoors.drone" = 
	{
		type = "csgo_mega"
		volume = 0.1
		pitch = 0.8
		mixgroup = "Ambient"
		block_matching_events = false
		block_match_entity = false
		reverb_wet = 1.0
		use_time_volume_mapping_curve = true
		use_distance_unfiltered_stereo_mapping_curve = true
		set_child_position = false
		vsnd_files_track_01 = "sounds/interior_01.vsnd" 
		distance_volume_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				300.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
		fadetime_volume_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				0.2, 0.0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
		time_volume_mapping_curve = 
		[
			[
				0.0, 0.0, 0.0, 6.823822,
				2.0, 2.0,
			],
			[
				2.0, 1.0, 0.260146, 0.260146,
				2.0, 3.0,
			],
		]
		distance_unfiltered_stereo_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				300.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
	}
	
	// Another example of a randomly positioned 3d sound around the player retriggered at a random time interval
	"ambient_example.indoors.rockfall" = 
	{
		type = "csgo_mega"
		volume = 0.7
		mixgroup = "Ambient"
		block_matching_events = false
		block_match_entity = false
		reverb_wet = 1.0
		randomize_position_min_radius = 500.00
		randomize_position_max_radius = 2000.000
		randomize_position_hemisphere = false
		use_time_volume_mapping_curve = true
		volume_random_max = 0.3
		pitch_random_min = -0.06
		pitch_random_max = 0.06
		retrigger_interval_min = 5.0
		retrigger_interval_max = 15.0
		enable_retrigger = true
		block_duration = 0.0
		block_distance = 0.0
		position = [ 0.0, 0.0, 0.0 ]
		use_world_position = false
		set_child_position = false
		position_relative_to_player = true
		vsnd_files_track_01 = 
		[
			"sounds/ambient/dust2/rockfall_01.vsnd",
			"sounds/ambient/dust2/rockfall_02.vsnd",
			"sounds/ambient/dust2/rockfall_03.vsnd",
			"sounds/ambient/dust2/rockfall_04.vsnd",
			"sounds/ambient/dust2/rockfall_05.vsnd",
		]
		distance_volume_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				1400.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
		fadetime_volume_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				2.0, 0.0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
		time_volume_mapping_curve = 
		[
			[
				0.0, 0.0, 0.0, 6.823822,
				2.0, 2.0,
			],
			[
				0.362857, 1.0, 0.260146, 0.260146,
				2.0, 3.0,
			],
		]
	}
	
	// TEMPLATE: A looping sound that plays at a position in the world. The .wav has embedded markers that define a looping region. 
	"ambient_example.indoors.vent" = 
	{
		type = "csgo_mega"
		volume = 0.2
		pitch = 1.0
		mixgroup = "Ambient"
		block_matching_events = false
		block_match_entity = false
		reverb_wet = 0.3
		use_time_volume_mapping_curve = true
		position = [ 1135.968750, 1391.918457, 64.031250 ] // use getpos in the console to get position values
		use_world_position = true
		use_distance_unfiltered_stereo_mapping_curve = false
		set_child_position = false
		vsnd_files_track_01 = "sounds/vent_01.vsnd"
		distance_volume_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				1500.0, 0.0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
		fadetime_volume_mapping_curve = 
		[
			[
				0.0, 1.0, 0.0, 0.0,
				2.0, 3.0,
			],
			[
				1, 0.0, 0.0, 0.0,
				2.0, 3.0,
			],
		]
		time_volume_mapping_curve = 
		[
			[
				0.0, 0.0, 0.0, 6.823822,
				2.0, 2.0,
			],
			[
				0.1, 1.0, 0.260146, 0.260146,
				2.0, 3.0,
			],
		]
	}
		
}